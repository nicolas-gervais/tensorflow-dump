import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
os.chdir(r'C:\Users\User\Documents\dogsvscats')
from tensorflow import keras as K
import tensorflow as tf


train_generator = K.preprocessing.image.ImageDataGenerator(
    rotation_range=30,
    brightness_range=.5,
    zoom_range=(0.7, 1.3),
    horizontal_flip=True,
    width_shift_range=.5,
    height_shift_range=.5,
    rescale=1/255
)

test_generator = K.preprocessing.image.ImageDataGenerator(
    rescale=1/255
)

BATCH_SIZE = 64

train_iterator = train_generator.flow_from_directory(
    directory='training_set',
    target_size=(150, 150),
    batch_size=BATCH_SIZE,
    class_mode='binary'
)

test_iterator = test_generator.flow_from_directory(
    directory='test_set',
    target_size=(150, 150),
    batch_size=BATCH_SIZE,
    class_mode='binary'
)


base = K.applications.Xception(
    include_top=False,
    input_tensor=None,
    input_shape=(150, 150, 3),
    pooling='max'
)

model = K.layers.Dense(2)

CNN = K.Model(inputs=base.input, outputs=model(base.output))

for layer in base.layers:
    layer.trainable = True


early_stop = K.callbacks.EarlyStopping(monitor='val_loss', patience=5)

CNN.compile(loss=K.losses.SparseCategoricalCrossentropy(from_logits=True),
            optimizer=K.optimizers.Adam(learning_rate=1e-4),
            metrics=[K.metrics.SparseCategoricalAccuracy()])

if tf.test.is_gpu_available():
    history = CNN.fit(x=train_iterator,
                      validation_data=test_iterator,
                      epochs=100, callbacks=[early_stop])
